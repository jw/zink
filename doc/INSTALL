
INSTALL

The required packages
=====================

These need to be installed first, using your package manager:

- virtualenv
- mercurial
- python-dev (for psycopg)
- pip
- postgresql postgresql-server-dev-9.4
- nginx
- uwsgi-plugin-python3

so, on a Debian based system, like Mint, you could do:

sudo apt-get virtualenv mercurial python-dev pip posgresql \
postgresql-server-dev-9.4 nginx uwsgi-plugin-python3

The database
============

The database can be created using the fabric script (see below), but you
can also create the database yourself.  Best to use the properties you
need to specify in the zink.properties file.

0) sudo -u postgres psql

1) Make sure you own the database engine
postgres=# ALTER USER postgres WITH PASSWORD '<your password>';

2) Create a database user
postgres=# create role <db.username> with createdb login
postgres-# password '<db.password>';

3) Create a database owned by this user
postgres=# create database <db.name> owner <db.username>;

Run the instance
================

The Django instance can run using the webserver (nginx and uwsgi) or
via the regular runserver manage.py task.

Fixtures
========

Remember that a superuser needs to be added:
> python manage createsuperuser

Add the fixtures (if fabric did not do so):

> python manage.py loaddata fixtures/static.json
> python manage.py loaddata fixtures/treemenus.json fixtures/menu_extras.json
> python manage.py loaddata fixtures/blog.json

Fabric
======

zink.properties
~~~~~~~~~~~~~~~

Fabric uses the zink.properties file to get the authentication data
(password, username) for three building environments:

 - development: your machine
 - staging: the staging environment
 - production: the production environments (like elevenbits.org, m8n.be)

The zink.properties file also needs to contain these entries:

[project]
key: <the key of the project, used by Django to secure your application>

[email]
host: <your email host>
port: <your email port>
user: <your email user>
password: <your email password>
tls: <set True to use tls (secure) mailing, False otherwise>

[twitter]
name: <your twitter name>
consumer.key: <your consumer key>
consumer.secret: <your consumer secret>
oauth.token: <your oauth token>
oauth.token.secret: <your oauth token secret>

settings.py
~~~~~~~~~~~

Using this file, Fabric will create a local settings file which will become
part of settings.py.

Database creation
~~~~~~~~~~~~~~~~~

Using the local settings file (containing all the database authentication
rules), Fabric will make sure that the database user and database are
present.  If they are not, they are created and the database is populated
with some default data.  When the user and the database are available,
no population is done during the deploy step.

It is of course possible to populate the database using the populate task.
